/**
 * Copyright (C) 2024 New York City Department of Health and Mental Hygiene, Bureau of Immunization
 * Contributions by HLN Consulting, LLC
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU
 * Lesser General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version. You should have received a copy of the GNU Lesser
 * General Public License along with this program. If not, see <http://www.gnu.org/licenses/> for more
 * details.
 *
 * The above-named contributors (HLN Consulting, LLC) are also licensed by the New York City
 * Department of Health and Mental Hygiene, Bureau of Immunization to have (without restriction,
 * limitation, and warranty) complete irrevocable access and rights to this project.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; THE
 *
 * SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING,
 * BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS, IF ANY, OR DEVELOPERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES, OR OTHER LIABILITY OF ANY KIND, ARISING FROM, OUT OF, OR IN CONNECTION WITH
 * THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information about this software, see http://www.hln.com/ice or send
 * correspondence to ice@hln.com.
 */
 
package knowledgeModule.gov.nyc.cir.ice

import java.util.Date
import java.util.Iterator
import java.util.List
import java.util.Set
import org.opencds.vmr.v1_0.internal.concepts.ImmunizationConcept
import org.opencds.vmr.v1_0.internal.EvalTime
import org.opencds.vmr.v1_0.internal.EvaluatedPerson
import org.opencds.vmr.v1_0.internal.SubstanceAdministrationEvent
import org.cdsframework.ice.service.ICEFactTypeFinding
import org.cdsframework.ice.service.ICELogicHelper
import org.cdsframework.ice.service.InconsistentConfigurationException
import org.cdsframework.ice.service.Season
import org.cdsframework.ice.service.Schedule
import org.cdsframework.ice.service.SeriesRules
import org.cdsframework.ice.supportingdatatmp.SupportedFactConcept
import org.cdsframework.ice.service.TargetDose
import org.cdsframework.ice.service.TargetSeasons
import org.cdsframework.ice.service.TargetSeries
import org.cdsframework.ice.util.TimePeriod


global java.util.Date evalTime
global org.cdsframework.ice.service.Schedule schedule


/*************************************************************************************************************************************************************************************
 Influenza TargetSeries Initialization Rules
*************************************************************************************************************************************************************************************/

rule "CandidateSeriesIdentification (Influenza): Initialize TargetSeries for *CURRENT* *Influenza* Season with Most Recent Prior Season Rules if Current Season Not Defined but Prior Season is Defined" 
	dialect "mvel"
	agenda-group "CandidateSeriesIdentification^customCandidateSeriesIdentificationRule"
	salience 10
	when
		$s : SeriesRules($vg : vaccineGroup, $sseriesName : seriesName, vaccineGroup == "VACCINE_GROUP_CONCEPT.800", seasons.size() > 0)
		not Season(isDefaultSeason() == false, isDefinedBySeriesTableRules() == true, vaccineGroup == $vg, dateIsApplicableToSeason(evalTime))
		$priorSeason : Season(isDefaultSeason() == false, isDefinedBySeriesTableRules() == true, vaccineGroup == $vg, $priorSeasonStart : fullySpecifiedSeasonStartDate, 
			$priorSeasonStart.toDate() < evalTime, $priorSeasonName : seasonName)
		Number(intValue > 0) from accumulate($accseason : Season(this == $priorSeason) from $s.seasons, count($accseason))
		not Season(vaccineGroup == $vg, isDefaultSeason() == false, isDefinedBySeriesTableRules() == true, fullySpecifiedSeasonStartDate.isAfter($priorSeasonStart))
		not (TargetSeries(seriesName == $s.seriesName, vaccineGroup == $vg, targetSeason != null, targetSeason == 
			Season.constructFullySpecifiedSeasonFromDefaultSeasonAndDate(new Season($priorSeasonName, $vg, false, $priorSeason.seasonStartMonth, 
				$priorSeason.seasonStartDay, $priorSeason.seasonEndMonth, $priorSeason.seasonEndDay), evalTime)))
		$tseasons : TargetSeasons()
	then
		String _RULENAME = kcontext.rule.name;
		int startMonth = $priorSeason.getSeasonStartMonth();
		int startDay = $priorSeason.getSeasonStartDay();
		int endMonth = $priorSeason.getSeasonEndMonth();
		int endDay = $priorSeason.getSeasonEndDay();
		Season fullySpecified = Season.constructFullySpecifiedSeasonFromDefaultSeasonAndDate(new Season($priorSeason.seasonName, $vg, false, startMonth, startDay, endMonth, endDay), evalTime);
		$tseasons.addTargetSeason(fullySpecified);
		TargetSeries ts = new TargetSeries($s, schedule, fullySpecified);
		$s.addFullySpecifiedSeason(fullySpecified);
		insert(ts);
		insert(fullySpecified);
		update($s);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "*Seasonal* TargetSeries initialized: " + ts.toString());
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "*Updated* TargetSeasons: " + $tseasons.toString());
end


rule "CandidateSeriesIdentification (Influenza): Initialize TargetSeries for *PAST* *Influenza* Season with Shots Administered with Most Recent Prior Season if No Applicable Season Defined at Time Shot Administered" 
	dialect "mvel"
	agenda-group "CandidateSeriesIdentification^customCandidateSeriesIdentificationRule"
	when
		ImmunizationConcept($ctid : conceptTargetId, $occ : openCdsConceptCode)
		SubstanceAdministrationEvent(id == $ctid, $shotDate : ICELogicHelper.extractSingularDateValueFromIVLDate(administrationTimeInterval))
		$s : SeriesRules($vg : vaccineGroup, $sseriesName : seriesName, vaccineGroup == "VACCINE_GROUP_CONCEPT.800", seasons.size() > 0)
		$priorSeason : Season(isDefaultSeason() == false, isDefinedBySeriesTableRules() == true, vaccineGroup == $vg, $priorSeasonStart : fullySpecifiedSeasonStartDate, 
			$priorSeasonStart.toDate() < $shotDate, $priorSeasonName : seasonName)
		Number(intValue > 0) from accumulate($accseason : Season(this == $priorSeason) from $s.seasons, count($accseason))
		not Season(vaccineGroup == $vg, isDefaultSeason() == false, isDefinedBySeriesTableRules() == true, fullySpecifiedSeasonStartDate.isAfter($priorSeasonStart))
		not (TargetSeries(seriesName == $s.seriesName, vaccineGroup == $vg, targetSeason != null, targetSeason == 
			Season.constructFullySpecifiedSeasonFromDefaultSeasonAndDate(new Season($priorSeasonName, $vg, false, $priorSeason.seasonStartMonth, 
				$priorSeason.seasonStartDay, $priorSeason.seasonEndMonth, $priorSeason.seasonEndDay), $shotDate)))
		$tseasons : TargetSeasons()
		eval(schedule.vaccineTargetsOneOrMoreOfSpecifiedDiseases(schedule.getVaccineByCdsConceptValue($occ), schedule.getDiseasesTargetedByVaccineGroup($vg)) == true)		
	then
		String _RULENAME = kcontext.rule.name;
		int startMonth = $priorSeason.getSeasonStartMonth();
		int startDay = $priorSeason.getSeasonStartDay();
		int endMonth = $priorSeason.getSeasonEndMonth();
		int endDay = $priorSeason.getSeasonEndDay();
		Season fullySpecified = Season.constructFullySpecifiedSeasonFromDefaultSeasonAndDate(new Season($priorSeason.seasonName, $vg, false, startMonth, startDay, endMonth, endDay), $shotDate);
		$tseasons.addTargetSeason(fullySpecified);
		TargetSeries ts = new TargetSeries($s, schedule, fullySpecified);
		$s.addFullySpecifiedSeason(fullySpecified);
		insert(ts);
		insert(fullySpecified);
		update($s);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "*Seasonal* TargetSeries initialized: " + ts.toString());
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "*Updated* TargetSeasons: " + $tseasons.toString());	
end




/*************************************************************************************************************************************************************************************
 RSV TargetSeries Initialization Rules
*************************************************************************************************************************************************************************************/

/////////////////////
// Logic to either select or combine the infant and/or adult series based on the current age of the patient and the age at which shots were administered. 
// This logic will be generalized and extended for use with other vaccine groups (such as pneumococcal) at a later time. This initial implementation for RSV, all of which can be 
// implemented in this agenda group, is as follows:  
//   + If there are no shots administered and the patient age is <= the maxAge of the infant series, add the infant series. Do not add the adult series.
//   + If there are no shots administered and the patient age is >= the minAge of the adult series, add the adult series. Do not add the infant series.
//   + If there are shots administered but they are all <= the max age of the infant series, simply add the infant series; do not add the adult series
//   + If there are shots administered but they are all >= the min age of the adult series, simply add the adult series; do not add the infant series
//   + If there are shots administered both <= the maxAge of the infant series and >= the minAge of the adult series, combine them.
/////////////////////

rule "CandidateSeriesIdentification (RSV): Verify that there are exactly 2 RSV series whereby the Infant Series has a patientEndAge that is 1 day less than the patientStartAge of the Adult Series"
	dialect "mvel"
	agenda-group "CandidateSeriesIdentification^customCandidateSeriesIdentificationRule"
	when
		accumulate($srrsv : SeriesRules(vaccineGroup == "VACCINE_GROUP_CONCEPT.875"); $count : count($srrsv); $count == 2)
		$rsvinfant : SeriesRules(vaccineGroup == "VACCINE_GROUP_CONCEPT.875", seriesName == "RSVInfantSeries")
		$rsvadult : SeriesRules(vaccineGroup == "VACCINE_GROUP_CONCEPT.875", seriesName == "RSVAdultSeries")
		eval($rsvinfant.seriesEndAge != null && $rsvadult.seriesStartAge != null && TimePeriod.differenceInDays(TimePeriod.addTimePeriod(evalTime, $rsvinfant.seriesEndAge), TimePeriod.addTimePeriod(evalTime, $rsvadult.seriesStartAge)) == 1)
	then
		String _RULENAME = kcontext.rule.name;
		insert(new ICEFactTypeFinding(SupportedFactconcept._CANDIDATE_SERIES_IDENTIFICATION_DEFAULT_RULE_OVERRIDE));
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "Criteria of exactly 2 RSV series defined as required; RSV processing can continue");
		setFocus("CandidateSeriesIdentification^customCandidateSeriesIdentificationRule^RSV");
end

/*
rule "CandidateSeriesIdentification(RSV): If there are no shots administered and the patient age is <= the maxAge of the infant series, then include the (seasonal) infant series for evaluation"
	dialect "mvel"
	agenda-group "CandidateSeriesIdentification^customCandidateSeriesIdentificationRule"
	when
		exists ICEFactTypeFinding("RSV All Series Patient Age Criteria Met");
		not TargetSeries(vaccineGroup == "VACCINE_GROUP_CONCEPT.875")
		$rsvinfant : SeriesRules(vaccineGroup == "VACCINE_GROUP_CONCEPT.875", seriesName == "RSVInfantSeries", seasons.size() > 0)
		$tseasons : TargetSeasons()
		EvaluatedPerson($birthDate : demographics.birthTime)
		eval(TimePeriod.calculateElapsedTimePeriod($birthDate, evalTime, DurationType.DAYS).isLessThanEqualTo($rsvinfant.seriesEndAge))
	then
		String _RULENAME = kcontext.rule.name;
		TargetSeries ts = new TargetSeries($rsvinfant, schedule);
		insert(ts);
end
*/


rule "CandidateSeriesIdentification (RSV): Initialize TargetSeries for *CURRENT* *Influenza* Season with Most Recent Prior Season Rules if Current Season Not Defined but Prior Season is Defined" 
	dialect "mvel"
	agenda-group "CandidateSeriesIdentification^customCandidateSeriesIdentificationRule^RSV"
	salience 190
	when
		exists ICEFactTypeFinding(iceResultFinding == SupportedFactconcept._CANDIDATE_SERIES_IDENTIFICATION_DEFAULT_RULE_OVERRIDE.conceptCodeValue)
		$s : SeriesRules($vg : vaccineGroup, $sseriesName : seriesName, vaccineGroup == "VACCINE_GROUP_CONCEPT.800", seasons.size() > 0)
		not Season(isDefaultSeason() == false, isDefinedBySeriesTableRules() == true, vaccineGroup == $vg, dateIsApplicableToSeason(evalTime))
		$priorSeason : Season(isDefaultSeason() == false, isDefinedBySeriesTableRules() == true, vaccineGroup == $vg, $priorSeasonStart : fullySpecifiedSeasonStartDate, 
			$priorSeasonStart.toDate() < evalTime, $priorSeasonName : seasonName)
		Number(intValue > 0) from accumulate($accseason : Season(this == $priorSeason) from $s.seasons, count($accseason))
		not Season(vaccineGroup == $vg, isDefaultSeason() == false, isDefinedBySeriesTableRules() == true, fullySpecifiedSeasonStartDate.isAfter($priorSeasonStart))
		not (TargetSeries(seriesName == $s.seriesName, vaccineGroup == $vg, targetSeason != null, targetSeason == 
			Season.constructFullySpecifiedSeasonFromDefaultSeasonAndDate(new Season($priorSeasonName, $vg, false, $priorSeason.seasonStartMonth, 
				$priorSeason.seasonStartDay, $priorSeason.seasonEndMonth, $priorSeason.seasonEndDay), evalTime)))
		$tseasons : TargetSeasons()
	then
		String _RULENAME = kcontext.rule.name;
		int startMonth = $priorSeason.getSeasonStartMonth();
		int startDay = $priorSeason.getSeasonStartDay();
		int endMonth = $priorSeason.getSeasonEndMonth();
		int endDay = $priorSeason.getSeasonEndDay();
		Season fullySpecified = Season.constructFullySpecifiedSeasonFromDefaultSeasonAndDate(new Season($priorSeason.seasonName, $vg, false, startMonth, startDay, endMonth, endDay), evalTime);
		$tseasons.addTargetSeason(fullySpecified);
		TargetSeries ts = new TargetSeries($s, schedule, fullySpecified);
		$s.addFullySpecifiedSeason(fullySpecified);
		insert(ts);
		insert(fullySpecified);
		update($s);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "*Seasonal* TargetSeries initialized: " + ts.toString());
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "*Updated* TargetSeasons: " + $tseasons.toString());
end


rule "CandidateSeriesIdentification (RSV): Initialize TargetSeries for *PAST* *Influenza* Season with Shots Administered with Most Recent Prior Season if No Applicable Season Defined at Time Shot Administered" 
	dialect "mvel"
	agenda-group "CandidateSeriesIdentification^customCandidateSeriesIdentificationRule^RSV"
	salience 180
	when
		exists ICEFactTypeFinding(iceResultFinding == SupportedFactconcept._CANDIDATE_SERIES_IDENTIFICATION_DEFAULT_RULE_OVERRIDE.conceptCodeValue)
		ImmunizationConcept($ctid : conceptTargetId, $occ : openCdsConceptCode)
		SubstanceAdministrationEvent(id == $ctid, $shotDate : ICELogicHelper.extractSingularDateValueFromIVLDate(administrationTimeInterval))
		$s : SeriesRules($vg : vaccineGroup, $sseriesName : seriesName, vaccineGroup == "VACCINE_GROUP_CONCEPT.800", seasons.size() > 0)
		$priorSeason : Season(isDefaultSeason() == false, isDefinedBySeriesTableRules() == true, vaccineGroup == $vg, $priorSeasonStart : fullySpecifiedSeasonStartDate, 
			$priorSeasonStart.toDate() < $shotDate, $priorSeasonName : seasonName)
		Number(intValue > 0) from accumulate($accseason : Season(this == $priorSeason) from $s.seasons, count($accseason))
		not Season(vaccineGroup == $vg, isDefaultSeason() == false, isDefinedBySeriesTableRules() == true, fullySpecifiedSeasonStartDate.isAfter($priorSeasonStart))
		not (TargetSeries(seriesName == $s.seriesName, vaccineGroup == $vg, targetSeason != null, targetSeason == 
			Season.constructFullySpecifiedSeasonFromDefaultSeasonAndDate(new Season($priorSeasonName, $vg, false, $priorSeason.seasonStartMonth, 
				$priorSeason.seasonStartDay, $priorSeason.seasonEndMonth, $priorSeason.seasonEndDay), $shotDate)))
		$tseasons : TargetSeasons()
		eval(schedule.vaccineTargetsOneOrMoreOfSpecifiedDiseases(schedule.getVaccineByCdsConceptValue($occ), schedule.getDiseasesTargetedByVaccineGroup($vg)) == true)		
	then
		String _RULENAME = kcontext.rule.name;
		int startMonth = $priorSeason.getSeasonStartMonth();
		int startDay = $priorSeason.getSeasonStartDay();
		int endMonth = $priorSeason.getSeasonEndMonth();
		int endDay = $priorSeason.getSeasonEndDay();
		Season fullySpecified = Season.constructFullySpecifiedSeasonFromDefaultSeasonAndDate(new Season($priorSeason.seasonName, $vg, false, startMonth, startDay, endMonth, endDay), $shotDate);
		$tseasons.addTargetSeason(fullySpecified);
		TargetSeries ts = new TargetSeries($s, schedule, fullySpecified);
		$s.addFullySpecifiedSeason(fullySpecified);
		insert(ts);
		insert(fullySpecified);
		update($s);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "*Seasonal* TargetSeries initialized: " + ts.toString());
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "*Updated* TargetSeasons: " + $tseasons.toString());	
end


rule "CandidateSeriesIdentification (RSV): Initialize TargetSeries for *Current* Season with Fully-Specified Season Parameters (if defined)"
	dialect "mvel"
	agenda-group "CandidateSeriesIdentification^customCandidateSeriesIdentificationRule^RSV"
	salience 100
	when
		exists ICEFactTypeFinding(iceResultFinding == SupportedFactconcept._CANDIDATE_SERIES_IDENTIFICATION_DEFAULT_RULE_OVERRIDE.conceptCodeValue)
		$s : SeriesRules(seasons != null, seasons.size() > 0, $vg : vaccineGroup)  
		$season : Season(isDefaultSeason() == false, isDefinedBySeriesTableRules() == true, dateIsApplicableToSeason(evalTime)) from $s.seasons
		not TargetSeries(vaccineGroup == "VACCINE_GROUP_CONCEPT.875", seriesName == $s.seriesName, targetSeason != null, targetSeason.isDefaultSeason() == false, targetSeason == $season))
	then
		String _RULENAME = kcontext.rule.name;
		TargetSeries ts = new TargetSeries($s, schedule, $season);
		insert(ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "*Seasonal RSV* TargetSeries initialized: " + ts.toString());		
end


rule "CandidateSeriesIdentification (RSV): Initialize *Current* Season TargetSeries with Default Season Parameters if Current Not Defined for the Vaccine Group"
	dialect "mvel"
	agenda-group "CandidateSeriesIdentification^customCandidateSeriesIdentificationRule^RSV"
	salience 90
	when
		exists ICEFactTypeFinding(iceResultFinding == SupportedFactconcept._CANDIDATE_SERIES_IDENTIFICATION_DEFAULT_RULE_OVERRIDE.conceptCodeValue)
		$s : SeriesRules($vg : vaccineGroup, seasons != null, seasons.size() > 0)
		$season : Season(isDefaultSeason() == true, dateIsApplicableToSeason(evalTime)) from $s.seasons
		not Season(isDefaultSeason() == false, vaccineGroup == $vg, dateIsApplicableToSeason(evalTime))
		not TargetSeries(vaccineGroup == "VACCINE_GROUP_CONCEPT.875", seriesName == $s.seriesName, targetSeason != null, targetSeason == $season)
		$tseasons : TargetSeasons()
	then
		String _RULENAME = kcontext.rule.name;
		Season fullySpecified = Season.constructFullySpecifiedSeasonFromDefaultSeasonAndDate($season, evalTime);
		$tseasons.addTargetSeason(fullySpecified);
		TargetSeries ts = new TargetSeries($s, schedule, fullySpecified);
		$s.addFullySpecifiedSeason(fullySpecified);		
		insert(ts);
		insert(fullySpecified);
		update($s);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "*Seasonal RSV* TargetSeries initialized: " + ts.toString());
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "*Updated* TargetSeasons: " + $tseasons.toString());
end


rule "CandidateSeriesIdentification (RSV): Initialize *Past* Season TargetSeries when Shots Administered with Fully-Specified Season Parameters if Fully-Specified Season Parameters Defined for the Season"
	dialect "mvel"
	agenda-group "CandidateSeriesIdentification^customCandidateSeriesIdentificationRule^RSV"
	salience 80
	when
		exists ICEFactTypeFinding(iceResultFinding == SupportedFactconcept._CANDIDATE_SERIES_IDENTIFICATION_DEFAULT_RULE_OVERRIDE.conceptCodeValue)
		ImmunizationConcept($ctid : conceptTargetId, $occ : openCdsConceptCode)
		SubstanceAdministrationEvent(id == $ctid, $shotDate : ICELogicHelper.extractSingularDateValueFromIVLDate(administrationTimeInterval))
		$s : SeriesRules($vg : vaccineGroup, seasons.size() > 0)
		$season : Season(isDefaultSeason() == false, isDefinedBySeriesTableRules() == true, $season.dateIsApplicableToSeason($shotDate)) from $s.seasons
		not TargetSeries(vaccineGroup == "VACCINE_GROUP_CONCEPT.875", seriesName == $s.seriesName, targetSeason != null, targetSeason == $season)
		eval(schedule.vaccineTargetsOneOrMoreOfSpecifiedDiseases(schedule.getVaccineByCdsConceptValue($occ), schedule.getDiseasesTargetedByVaccineGroup($vg)) == true)		
	then
		String _RULENAME = kcontext.rule.name;
		TargetSeries ts = new TargetSeries($s, schedule, $season);
		insert(ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "*Seasonal* TargetSeries initialized: " + ts.toString());		
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "CandidateSeriesIdentification (RSV): Initialize *Past* Season TargetSeries when Shots Administered with Default Season Parameters if No Fully-Specified Season Parameters Defined for the Season"
	dialect "mvel"
	agenda-group "CandidateSeriesIdentification^customCandidateSeriesIdentificationRule^RSV"
	salience 70
	when
		exists ICEFactTypeFinding(iceResultFinding == SupportedFactconcept._CANDIDATE_SERIES_IDENTIFICATION_DEFAULT_RULE_OVERRIDE.conceptCodeValue)
		ImmunizationConcept($ctid : conceptTargetId, $occ : openCdsConceptCode)
		SubstanceAdministrationEvent(id == $ctid, $shotDate : ICELogicHelper.extractSingularDateValueFromIVLDate(administrationTimeInterval))
		$s : SeriesRules($vg : vaccineGroup, seasons.size() > 0)
		$season : Season(isDefaultSeason() == true) from $s.seasons
		not Season(isDefaultSeason() == false, vaccineGroup == $vg, dateIsApplicableToSeason($shotDate))
		// Note: for TargetSeries, do not match on series name when there is a default seasons because we do not want a TargetSeries created for the default season if another TargetSeries
		// already handles that season
		not TargetSeries(vaccineGroup == "VACCINE_GROUP_CONCEPT.875", targetSeason != null, targetSeason == Season.constructFullySpecifiedSeasonFromDefaultSeasonAndDate($season, $shotDate)) 
		$tseasons : TargetSeasons()
		eval(schedule.vaccineTargetsOneOrMoreOfSpecifiedDiseases(schedule.getVaccineByCdsConceptValue($occ), schedule.getDiseasesTargetedByVaccineGroup($vg)) == true)		
	then
		String _RULENAME = kcontext.rule.name;
		// Create a fully-specified season for this specific year using the default month and day
		Season fullySpecified = Season.constructFullySpecifiedSeasonFromDefaultSeasonAndDate($season, $shotDate);
		$tseasons.addTargetSeason(fullySpecified);
		TargetSeries ts = new TargetSeries($s, schedule, fullySpecified);
		$s.addFullySpecifiedSeason(fullySpecified);
		insert(ts);
		insert(fullySpecified);
		update($s);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "*Seasonal* TargetSeries initialized: " + ts.toString());
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "*Updated* TargetSeasons: " + $tseasons.toString());		
end


rule "CandidateSeriesIdentification (RSV): Initialize TargetSeries when Shots Administered when One and Only One Season for Vaccine Group exists and no matching Fully-Specified Season Parameters or Default Season Defined for the Season"
	dialect "mvel"
	agenda-group "CandidateSeriesIdentification^customCandidateSeriesIdentificationRule^RSV"
	salience 70
	when
		exists ICEFactTypeFinding(iceResultFinding == SupportedFactconcept._CANDIDATE_SERIES_IDENTIFICATION_DEFAULT_RULE_OVERRIDE.conceptCodeValue)
		ImmunizationConcept($ctid : conceptTargetId, $occ : openCdsConceptCode)
		SubstanceAdministrationEvent(id == $ctid, $shotDate : ICELogicHelper.extractSingularDateValueFromIVLDate(administrationTimeInterval))
		$s : SeriesRules($vg : vaccineGroup, seasons.size() > 0)
		not Season(isDefaultSeason() == true, vaccineGroup == $vg)
		// Condition: If there is only one season and above TS does not match it, then we can conclude that there is no seasonal TS that will match
		accumulate($accSeason : Season(vaccineGroup == $vg); $count : count($accSeason); $count == 1)		
		$season : Season(isDefaultSeason() == false, vaccineGroup == $vg, dateIsApplicableToSeason($shotDate) == false)
		not TargetSeries(vaccineGroup == "VACCINE_GROUP_CONCEPT.875", seriesName == $s.seriesName, targetSeason != null, targetSeason == $season)
		eval(schedule.vaccineTargetsOneOrMoreOfSpecifiedDiseases(schedule.getVaccineByCdsConceptValue($occ), schedule.getDiseasesTargetedByVaccineGroup($vg)) == true)		
	then
		String _RULENAME = kcontext.rule.name;
		TargetSeries ts = new TargetSeries($s, schedule, $season);
		insert(ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "*Seasonal* TargetSeries initialized: " + ts.toString());		
end
